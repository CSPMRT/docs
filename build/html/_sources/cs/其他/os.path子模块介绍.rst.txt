********************
os.path常用方法介绍
********************

.. metadata::
   Chen Liuwen
   2020,08,07

+-----------------+-----------------+-------------------+---------------------+
| 方法名称        | 使用方法        | 方法主要功能      | 返回值              |
+=================+=================+===================+=====================+
| exists          | os.path.exists( | 判断路径下文件    | bool                |
|                 | 路径)           | 是否存在          |                     |
+-----------------+-----------------+-------------------+---------------------+
| abspath         | os.path.abspath | 将相对路径转换    | 返回相对路径的      |
|                 | (路径)          | 为绝对路径        | 绝对路径            |
+-----------------+-----------------+-------------------+---------------------+
| spilt           | os.path.spilt(路| 将路径拆分为      | 返回由主体部分和路  |
|                 | 径)             | 路径部分和主体部分| 径部分构成的元祖    |
+-----------------+-----------------+-------------------+---------------------+
| getsize         | os.path.getsize | 获取指定路径文件  | 返回文件大小        |
|                 | (路径)          | 大小（文件夹无效）|                     |
+-----------------+-----------------+-------------------+---------------------+
| join            | os.path.join(路 | 将2个路径合并为   | 返回合并后的路径    |
|                 | 径1，路径2)     | 一个路径          |                     |
+-----------------+-----------------+-------------------+---------------------+

部分方法举例：
-----------------

1. ``os.path.abspath(路径)`` 用于将 ``相对路径`` 转换为 ``绝对路径``

::

   import os

   FilePath = os.path.abspath("./1.txt")
   print("FilePath=",FilePath)


输出如下 ``FilePath= /tmp/1.txt``


2. ``os.path.join(路径1，路径2)`` 用于将 ``两个路径`` 合并为 ``一个路径``

::

   import os

   Filename1,Filename2 = os.path.split("/tmp/test/1.txt")
   print("Filename1=",Filename1+'\n'+"Filename2=",Filename2)

   Filename = os.path.join(Filename1,Filename2)
   print("Filename =",Filename)


在这里我们首先可以看到使用 ``split`` 将一个绝对路径拆成路径部分和路径主体，之后在使用 ``join`` 将2个路径和并起来.输出如下：

::

   Filename1= /tmp/test/
   Filename2= 1.txt
   Filename = /tmp/test/1.txt


3. ``os.path.getsize(路径)`` 获取指定路径的文件大小。

::

   #Tool Pycharm
   #time 2020/8/7
   #我们还是用1.txt来举例
   import os
   #注意getsize（）的返回值的类型为字节
   FileSize = os.path.getsize("1.txt")
   print("FileSize=",FileSize)


**输出如下**:

::

   FileSize= 1066

   Process finished with exit code 0


4.最后一个是 ``os.path.exists(路径)`` 用于判断路径下的文件是否存在，这个函数非常 ``重要``.
现在我们来判断一个不存在的文件。

::

   #Tool Pycharm
   #time 2020/8/7
   #我们还是用1.txt来举例
   import os

   print(os.path.exists('1.txt'))

结果如下

::

   False

   Process finished with exit code 0

os.path子模块还有一些常用的库如下，就不一一介绍，大家可以百度自行参考


+----------+------------------------+----------------------------+--------+
| 方法名称 | 使用方法               | 方法主要功能               | 返回值 |
+==========+========================+============================+========+
| isdir    | os.path.isdir(路径)    | 判断路径下文件是否是文件夹 | bool   |
+----------+------------------------+----------------------------+--------+
| isfile   | os.path.isfile(路径)   | 判断路径下文件是否是文件   | bool   |
+----------+------------------------+----------------------------+--------+
| islink   | os.path.islink(路径)   | 判断路径下文件是否是链接   | bool   |
+----------+------------------------+----------------------------+--------+
| getctime | os.path.getctime(路径) | 获取文件创建时间           | 时间戳 |
+----------+------------------------+----------------------------+--------+
| getmtime | os.path.getmtime(路径) | 获取文件最后修改时间       | 时间戳 |
+----------+------------------------+----------------------------+--------+
| getatime | os.path.getatime(路径) | 获取文件最后访问时间       | 时间戳 |
+----------+------------------------+----------------------------+--------+
